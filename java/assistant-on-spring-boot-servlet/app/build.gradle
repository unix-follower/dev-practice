plugins {
    id "java"
    id "jacoco"
    id "pmd"
    id "checkstyle"
    id "org.springframework.boot"
    id "io.spring.dependency-management"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

dependencies {
    implementation(project(":stock-market-db"))
    implementation(project(":chemistry-pubchem-fda-db"))

    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "io.micrometer:micrometer-tracing-bridge-brave"
    implementation "io.zipkin.reporter2:zipkin-reporter-brave"
    implementation "org.liquibase:liquibase-core"
    implementation "org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j"
    implementation "org.springframework.cloud:spring-cloud-starter-config"
    // https://mvnrepository.com/artifact/org.zalando/logbook-spring-boot-starter
    implementation "org.zalando:logbook-spring-boot-starter:3.12.2"
    implementation "org.zalando:logbook-servlet:3.12.2:javax"
    // https://mvnrepository.com/artifact/net.logstash.logback/logstash-logback-encoder
    implementation "net.logstash.logback:logstash-logback-encoder:8.1"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    runtimeOnly "io.micrometer:micrometer-registry-prometheus"
    runtimeOnly "org.postgresql:postgresql"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named("bootBuildImage") {
    runImage = "paketobuildpacks/ubuntu-noble-run-base:latest"
}

pmd {
    ignoreFailures = false
    ruleSets = [] // Disable default rulesets
    ruleSetFiles = files("../config/pmd-ruleset.xml")
}

checkstyle {
    configFile = file("../config/checkstyle.xml")
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "org/example/assistantonsbservlet/config/**",
            ])
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }

        rule {
            enabled = false
            element = "CLASS"

            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                maximum = 0.8
            }
        }
    }
}

tasks.named("test") {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport
}

tasks.withType(Pmd) {
    reports {
        xml.required = true
        html.required = true
        maxFailures = 1
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
        maxWarnings = 1
        maxErrors = 1
    }
}
